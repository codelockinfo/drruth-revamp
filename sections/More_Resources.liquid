<div class="amr_more_resources amr_dots_arrows" style="background-color:{{ section.settings.bg_color }};">
  <div class="amr_container_1170" style="background-color:{{ section.settings.slide_bg_color }};">
    <div class="amr_pet_consultants_header">
      {% if section.settings.heading != blank %}<h2>{{ section.settings.heading }}</h2>{% endif %}
      {% if section.settings.desc != blank %}<div>{{ section.settings.desc }}</div>{% endif %}
      <div class="amr_PD_btn_grup">
        {% if section.settings.btn_txt != blank %}<a href="{{ section.settings.btn_url }}">{{ section.settings.btn_txt }}</a>{% endif %}
        {% if section.settings.btn_txt2 != blank %}<a href="{{ section.settings.btn_url2 }}">{{ section.settings.btn_txt2 }}</a>{% endif %}
      </div>
    </div>
    
      <!-- <div class="amr_MR_images">
        {% for block in section.blocks %}
          <div class="amr_MR_img">
            <img src="{{ block.settings.main_img | img_url:'master' }}">
          </div>
        {% endfor %}
      </div> -->





    <div class="container">
  <div class="rev_slider">
    <div class="rev_slide">
      <div class="test">Some textSome text Some text Some text</div>
    </div>

    <div class="rev_slide">
      <div class="test">1</div>
    </div>
    <div class="rev_slide">
      <div class="test">2</div>
    </div>
    <div class="rev_slide">
      <div class="test">3</div>
    </div>
    <div class="rev_slide">
      <div class="test">SLIDEEEEEEEEEE!!!!!!!!</div>
    </div>
    <div class="rev_slide">
      <div class="test"></div>
    </div>
    <div class="rev_slide">
      <div class="test"></div>
    </div>
    <div class="rev_slide">
      <div class="test"></div>
    </div>
    <div class="rev_slide">
      <div class="test"></div>
    </div>
  </div>
</div>


    

    </div>
   </div>




<style>
.container {
  width: 900px;
  margin: 0 auto;
  max-width: 80%;
}

.slick-slider {
  margin-left: -12%;
  margin-right: -12%;
}

.slick-list {
  padding-top: 10%!important;
  padding-bottom: 10%!important;
  padding-left: 15%!important;
  padding-right: 15%!important;
}

.slick-dots {
  text-align: right;
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
}

.slick-track {
  max-width: 100%!important;
  transform: translate3d(0, 0, 0)!important;
  perspective: 100px;
}

.slick-slide {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
  opacity: 0;
  width: 100%!important;
  transform: translate3d(0, 0, 0);
  transition: transform 1s, opacity 1s;
}

.slick-snext,
.slick-sprev,
.slick-snext2,
.slick-sprev2{
  display: block;
}

.slick-current {
  opacity: 1;
  position: relative;
  display: block;
  z-index: 2;
}

.slick-snext {
  opacity: 1;
  transform: translate3d(10%, 0, -10px);
  z-index: 1;
  perspective: 1000px;
}
.slick-snext2 {
  opacity: 1;
  transform: translate3d(20%, 0, -20px);
  z-index: 0;
  perspective: 1000px;
}

.slick-sprev {
  opacity: 1;
  transform: translate3d(-10%, 0, -10px);
}

.slick-sprev2 {
  opacity: 1;
  transform: translate3d(-20%, 0, -20px);
}

.test {
  display: block;
  width: 100%;
  height: 300px;
  background: #c00;
  box-shadow: inset 0px 0px 0px 3px #000
}
  
</style>
<script>
  "use strict";

// forEach FIX for IE 
(function () {
  if ( typeof NodeList.prototype.forEach === "function" ) return false;
  NodeList.prototype.forEach = Array.prototype.forEach;
})();

//document.documentElement.setAttribute("data-agent", navigator.userAgent);

// Slider prototype object
function Slider(element, imageSelector) {
  //Image selector class or default
  this.imageClass = imageSelector || '.slider__image';

  //Array with images in slider
  this.images = element.querySelectorAll(this.imageClass);

  //Previous image
  this.previous = function() {
    this.images.forEach( function img(elem,index) {
      let Index = parseInt(elem.getAttribute('data-index')), IN, addClass;
      if (Index < 5){ IN = Index + 1; } 
      else { IN = 1; }
      addClass = 'image--'+IN;
      elem.className = elem.className.replace(/image--[0-9]/,'');
      elem.setAttribute('data-index', IN);
      elem.classList.add(addClass);

      if (addClass == 'image--1') { elem.classList.add('active'); } 
      else { elem.classList.remove('active'); }
    });
  };

  //Next image
  this.next = function() {
    this.images.forEach(function (elem, index) {
      let Index = parseInt(elem.getAttribute('data-index')), IN, addClass;
      if(Index > 1){ IN = Index - 1; } 
      else { IN = 5; }
      addClass = 'image--'+IN;
      elem.className = elem.className.replace(/image--[0-9]/,'');
      elem.setAttribute('data-index', IN);
      elem.classList.add(addClass);

      if(addClass=='image--1'){ elem.classList.add('active'); } 
      else { elem.classList.remove('active'); }
    });
  };
};

const d = document,
      slider = d.getElementById('slider'),    //Slider container
      next = d.getElementById('next'),        //Next slide button 
      prev = d.getElementById('prev');        //Previous slide button
let isWheel;                                  //Global var for setTimeout

//Creating carousel
let carousel = new Slider(slider);

//Button 
next.addEventListener('click', function(e) { carousel.next(); }, true);
prev.addEventListener('click', function(e) { carousel.previous(); }, true);

//Adding sliding when scroll
slider.addEventListener('wheel', function(e){
  e.preventDefault;

  if (e.deltaY > 0){ carousel.next(); } 
  else { carousel.previous(); }

  //Getting alt text (name) from .active slide
  let active = this.getElementsByClassName('active'),
      name = active[0].getAttribute('alt');

  //Stoping latest timeout
  window.clearTimeout(isWheel);

  //creating new timeout for current active slide
  isWheel = window.setTimeout(function(e) { alert(name); }, 1500);
});

//Adding swipe events to inner slider container
let sliderInner = slider.querySelector('.slider__inner');
swipedetect(sliderInner, function (swipedir) {
  if (swipedir == 'left') { carousel.previous(); }
  if (swipedir == 'right') { carousel.next(); }
});

// Library for swipe detect
// credit: http://www.javascriptkit.com/javatutors/touchevents2.shtml
function swipedetect(el, callback) {
  let touchsurface = el,
      swipedir,
      startX,
      startY,
      distX,
      distY,
      dist,
      threshold = 150, //required min distance traveled to be considered swipe
      restraint = 100, // maximum distance allowed at the same time in perpendicular direction
      allowedTime = 300, // maximum time allowed to travel that distance
      elapsedTime,
      startTime,
      handleswipe = callback || function (swipedir) { }

  touchsurface.addEventListener('touchstart', function(e) {
    let touchobj = e.changedTouches[0]
    swipedir = 'none'
    dist = 0
    startX = touchobj.pageX
    startY = touchobj.pageY
    startTime = new Date().getTime() // record time when finger first makes contact with surface
    e.preventDefault()
  }, false)

  touchsurface.addEventListener('touchmove', function (e) {
    e.preventDefault() // prevent scrolling when inside DIV
  }, false)

  touchsurface.addEventListener('touchend', function (e) {
    let touchobj = e.changedTouches[0]
    distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface
    distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface
    elapsedTime = new Date().getTime() - startTime // get time elapsed
    if (elapsedTime <= allowedTime) { // first condition for awipe met
      if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) { // 2nd condition for horizontal swipe met
        swipedir = (distX < 0) ? 'left' : 'right' // if dist traveled is negative, it indicates left swipe
      }
      else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) { // 2nd condition for vertical swipe met
        swipedir = (distY < 0) ? 'up' : 'down' // if dist traveled is negative, it indicates up swipe
      }
    }
    handleswipe(swipedir)
    e.preventDefault()
  }, false)
}
</script>











  
{% schema %}
{
  "name": "More Resources",
  "max_blocks":5,
  "settings": [
    {
      "type":"color",
      "id":"bg_color",
      "label":"Background Color"
    },
    {
      "type":"color",
      "id":"slide_bg_color",
      "label":"Slider Background Color"
    },
    {
      "type": "text",
      "id": "heading",
      "label":"Heading"
    },
    {
      "type": "richtext",
      "id": "desc",
      "label":"Description"
    },
    {
      "type":"text",
      "id":"btn_txt",
      "label":"Button Text"
    },
    {
      "type":"url",
      "id":"btn_url",
      "label":"Button URL"
    },
    {
      "type":"text",
      "id":"btn_txt2",
      "label":"Button Text"
    },
    {
      "type":"url",
      "id":"btn_url2",
      "label":"Button URL"
    }
  ],
  "blocks": [
    {
      "type": "Images",
      "name": "Images",
      "settings": [
        {
          "type":"text",
          "id":"custom_class",
          "label":"Custom Class"
        },
        {
          "type": "image_picker",
          "id": "main_img",
          "label":"Image"
        }
      ]
    }
  ],
  "presets": [
      {
        "name": "More Resources"
      }
    ]
}
{% endschema %}