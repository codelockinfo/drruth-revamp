<div class="amr_more_resources amr_dots_arrows" style="background-color:{{ section.settings.bg_color }};">
  <div class="amr_container_1170" style="background-color:{{ section.settings.slide_bg_color }};">
    <div class="amr_pet_consultants_header">
      {% if section.settings.heading != blank %}<h2>{{ section.settings.heading }}</h2>{% endif %}
      {% if section.settings.desc != blank %}<div>{{ section.settings.desc }}</div>{% endif %}
      <div class="amr_PD_btn_grup">
        {% if section.settings.btn_txt != blank %}<a href="{{ section.settings.btn_url }}">{{ section.settings.btn_txt }}</a>{% endif %}
        {% if section.settings.btn_txt2 != blank %}<a href="{{ section.settings.btn_url2 }}">{{ section.settings.btn_txt2 }}</a>{% endif %}
      </div>
    </div>
    
      <!-- <div class="amr_MR_images">
        {% for block in section.blocks %}
          <div class="amr_MR_img">
            <img src="{{ block.settings.main_img | img_url:'master' }}">
          </div>
        {% endfor %}
      </div> -->


<div id="slider" class="slider">
  <div class="slider__inner">
    {% for block in section.blocks %}
    <img src="{{ block.settings.main_img | img_url:'master' }}" data-index="{{ forloop.index }}" class="slider__image image--{{ forloop.index }}">
    {% endfor %}
    
  </div>
  <div class="slider__action">
    <div id="prev" class="slider__button slider__button--prev">
      <i class="fas fa-angle-left"></i>
    </div>
    <div id="next" class="slider__button slider__button--next">
      <i class="fas fa-angle-right"></i>
    </div>
  </div>
</div>









    

    </div>
   </div>




<style>
*, *::before, *::after {
	 -webkit-box-sizing: border-box;
	 -moz-box-sizing: border-box;
	 box-sizing: border-box;
}
 .slider {
	 max-width: 600px;
	 width: auto;
	 height: 260px;
	 margin: 0 auto;
	 position: relative;
	 overflow: hidden;
	 padding: 0 25px;
}
 .slider__inner {
	 height: 100%;
	 width: 100%;
}
 .slider__button {
	 position: absolute;
	 width: 20px;
	 height: 20px;
	 top: 50%;
	 margin-top: -10px;
	 z-index: 120;
	 background: #001380;
	 color: #fff;
	 opacity: 0.4;
	 cursor: pointer;
	 text-align: center;
	 border-radius: 50%;
	 -webkit-border-radius: 50%;
	 -moz-border-radius: 50%;
	 box-shadow: -1px 1px 5px 0px #000;
	 -webkit-box-shadow: -1px 1px 5px 0px #000;
	 -moz-box-shadow: -1px 1px 5px 0px #000;
}
 .slider__button .fas {
	 display: inline-block;
	 height: 100%;
	 line-height: 20px;
	 font-size: 16px;
}
 .slider__button:hover {
	 opacity: 1;
	 text-decoration: none;
}
 .slider__button--next {
	 right: 2px;
}
 .slider__button--prev {
	 left: 2px;
}
 .slider__image {
	 display: block;
	 width: 300px;
	 height: 200px;
	 position: absolute;
	 border: solid 1px #000;
	 top: 30px;
	 transition: ease-in-out 0.3s;
	 -webkit-transition: ease-in-out 0.3s;
	 -moz-transition: ease-in-out 0.3s;
}
 .image--1 {
	 left: 50%;
	 margin-left: -150px;
	 opacity: 1;
	 z-index: 50;
	 transform: scale(1);
	 -ms-transform: scale(1);
	 -moz-transform: scale(1);
	 -webkit-transform: scale(1);
	 -webkit-filter: blur(0px);
	 filter: blur(0px);
	 transition: filter 0ms, transform 300ms, left 400ms ease-in-out, right 400ms ease-in;
	 -webkit-transition: filter 0ms, transform 300ms, left 400ms ease-in-out, right 400ms ease-in;
	 -moz-transition: filter 0ms, transform 300ms, left 400ms ease-in-out, right 400ms ease-in;
}
 .image--2 {
	 left: 45%;
	 margin-left: -170px;
	 opacity: 0.85;
	 z-index: 40;
	 transform: scale(0.8);
	 -ms-transform: scale(0.8);
	 -moz-transform: scale(0.8);
	 -webkit-transform: scale(0.8);
	 -webkit-filter: blur(5px);
	 filter: blur(5px);
	 transition: transform 0.4s;
	 -webkit-transition: transform 0.4s;
	 -moz-transition: transform 0.4s;
}
 .image--3 {
	 left: 40%;
	 margin-left: -190px;
	 opacity: 0.6;
	 z-index: 30;
	 transform: scale(0.6);
	 -ms-transform: scale(0.6);
	 -moz-transform: scale(0.6);
	 -webkit-transform: scale(0.6);
	 -webkit-filter: blur(7px);
	 filter: blur(7px);
	 transition: ease-in-out 0.5s;
	 -webkit-transition: ease-in-out 0.5s;
	 -moz-transition: ease-in-out 0.5s;
}
 .image--4 {
	 right: 40%;
	 margin-right: -190px;
	 opacity: 0.6;
	 z-index: 10;
	 transform: scale(0.6);
	 -ms-transform: scale(0.6);
	 -moz-transform: scale(0.6);
	 -webkit-transform: scale(0.6);
	 -webkit-filter: blur(7px);
	 filter: blur(7px);
	 transition: ease-in-out 0.5s;
	 -webkit-transition: ease-in-out 0.5s;
	 -moz-transition: ease-in-out 0.5s;
}
 .image--5 {
	 right: 45%;
	 margin-right: -170px;
	 opacity: 0.85;
	 z-index: 20;
	 transform: scale(0.8);
	 -ms-transform: scale(0.8);
	 -moz-transform: scale(0.8);
	 -webkit-transform: scale(0.8);
	 -webkit-filter: blur(5px);
	 filter: blur(5px);
	 transition: transform 0.4s;
	 -webkit-transition: transform 0.4s;
	 -moz-transition: transform 0.4s;
}
 @media (max-width: 580px) {
	 .slider {
		 height: 200px;
	}
	 .slider__image {
		 width: 200px;
		 height: 135px;
	}
	 .image--2, .image--3 {
		 left: 50%;
	}
	 .image--4, .image--5 {
		 right: 50%;
	}
	 .image--1 {
		 margin-left: -100px;
	}
	 .image--2 {
		 margin-left: -130px;
	}
	 .image--3 {
		 margin-left: -160px;
	}
	 .image--4 {
		 margin-right: -160px;
	}
	 .image--5 {
		 margin-right: -130px;
	}
}
 
</style>
<script>
  "use strict";

// forEach FIX for IE 
(function () {
  if ( typeof NodeList.prototype.forEach === "function" ) return false;
  NodeList.prototype.forEach = Array.prototype.forEach;
})();

//document.documentElement.setAttribute("data-agent", navigator.userAgent);

// Slider prototype object
function Slider(element, imageSelector) {
  //Image selector class or default
  this.imageClass = imageSelector || '.slider__image';

  //Array with images in slider
  this.images = element.querySelectorAll(this.imageClass);

  //Previous image
  this.previous = function() {
    this.images.forEach( function img(elem,index) {
      let Index = parseInt(elem.getAttribute('data-index')), IN, addClass;
      if (Index < 5){ IN = Index + 1; } 
      else { IN = 1; }
      addClass = 'image--'+IN;
      elem.className = elem.className.replace(/image--[0-9]/,'');
      elem.setAttribute('data-index', IN);
      elem.classList.add(addClass);

      if (addClass == 'image--1') { elem.classList.add('active'); } 
      else { elem.classList.remove('active'); }
    });
  };

  //Next image
  this.next = function() {
    this.images.forEach(function (elem, index) {
      let Index = parseInt(elem.getAttribute('data-index')), IN, addClass;
      if(Index > 1){ IN = Index - 1; } 
      else { IN = 5; }
      addClass = 'image--'+IN;
      elem.className = elem.className.replace(/image--[0-9]/,'');
      elem.setAttribute('data-index', IN);
      elem.classList.add(addClass);

      if(addClass=='image--1'){ elem.classList.add('active'); } 
      else { elem.classList.remove('active'); }
    });
  };
};

const d = document,
      slider = d.getElementById('slider'),    //Slider container
      next = d.getElementById('next'),        //Next slide button 
      prev = d.getElementById('prev');        //Previous slide button
let isWheel;                                  //Global var for setTimeout

//Creating carousel
let carousel = new Slider(slider);

//Button 
next.addEventListener('click', function(e) { carousel.next(); }, true);
prev.addEventListener('click', function(e) { carousel.previous(); }, true);

//Adding sliding when scroll
slider.addEventListener('wheel', function(e){
  e.preventDefault;

  if (e.deltaY > 0){ carousel.next(); } 
  else { carousel.previous(); }

  //Getting alt text (name) from .active slide
  let active = this.getElementsByClassName('active'),
      name = active[0].getAttribute('alt');

  //Stoping latest timeout
  window.clearTimeout(isWheel);

  //creating new timeout for current active slide
  isWheel = window.setTimeout(function(e) { alert(name); }, 1500);
});

//Adding swipe events to inner slider container
let sliderInner = slider.querySelector('.slider__inner');
swipedetect(sliderInner, function (swipedir) {
  if (swipedir == 'left') { carousel.previous(); }
  if (swipedir == 'right') { carousel.next(); }
});

// Library for swipe detect
// credit: http://www.javascriptkit.com/javatutors/touchevents2.shtml
function swipedetect(el, callback) {
  let touchsurface = el,
      swipedir,
      startX,
      startY,
      distX,
      distY,
      dist,
      threshold = 150, //required min distance traveled to be considered swipe
      restraint = 100, // maximum distance allowed at the same time in perpendicular direction
      allowedTime = 300, // maximum time allowed to travel that distance
      elapsedTime,
      startTime,
      handleswipe = callback || function (swipedir) { }

  touchsurface.addEventListener('touchstart', function(e) {
    let touchobj = e.changedTouches[0]
    swipedir = 'none'
    dist = 0
    startX = touchobj.pageX
    startY = touchobj.pageY
    startTime = new Date().getTime() // record time when finger first makes contact with surface
    e.preventDefault()
  }, false)

  touchsurface.addEventListener('touchmove', function (e) {
    e.preventDefault() // prevent scrolling when inside DIV
  }, false)

  touchsurface.addEventListener('touchend', function (e) {
    let touchobj = e.changedTouches[0]
    distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface
    distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface
    elapsedTime = new Date().getTime() - startTime // get time elapsed
    if (elapsedTime <= allowedTime) { // first condition for awipe met
      if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) { // 2nd condition for horizontal swipe met
        swipedir = (distX < 0) ? 'left' : 'right' // if dist traveled is negative, it indicates left swipe
      }
      else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) { // 2nd condition for vertical swipe met
        swipedir = (distY < 0) ? 'up' : 'down' // if dist traveled is negative, it indicates up swipe
      }
    }
    handleswipe(swipedir)
    e.preventDefault()
  }, false)
}
</script>











  
{% schema %}
{
  "name": "More Resources",
  "max_blocks":5,
  "settings": [
    {
      "type":"color",
      "id":"bg_color",
      "label":"Background Color"
    },
    {
      "type":"color",
      "id":"slide_bg_color",
      "label":"Slider Background Color"
    },
    {
      "type": "text",
      "id": "heading",
      "label":"Heading"
    },
    {
      "type": "richtext",
      "id": "desc",
      "label":"Description"
    },
    {
      "type":"text",
      "id":"btn_txt",
      "label":"Button Text"
    },
    {
      "type":"url",
      "id":"btn_url",
      "label":"Button URL"
    },
    {
      "type":"text",
      "id":"btn_txt2",
      "label":"Button Text"
    },
    {
      "type":"url",
      "id":"btn_url2",
      "label":"Button URL"
    }
  ],
  "blocks": [
    {
      "type": "Images",
      "name": "Images",
      "settings": [
        {
          "type":"text",
          "id":"custom_class",
          "label":"Custom Class"
        },
        {
          "type": "image_picker",
          "id": "main_img",
          "label":"Image"
        }
      ]
    }
  ],
  "presets": [
      {
        "name": "More Resources"
      }
    ]
}
{% endschema %}